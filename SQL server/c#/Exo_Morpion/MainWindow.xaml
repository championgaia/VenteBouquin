<Window x:Class="Exo_Morpion.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:classes="clr-namespace:Exo_Morpion.Classes"
        mc:Ignorable="d"
        Title="Morpion" Height="450" Width="800">
    <Window.Resources>

        <Style x:Key="GrilleStyle" TargetType="ItemsControl">
            <Style.Triggers>
                <DataTrigger Binding="{Binding Jeu.PartieEnCours.EstTerminee}" Value="True">
                    <Setter Property="BorderBrush" Value="Azure"/>
                    <Setter Property="BorderThickness" Value="1"/>
                    <Setter Property="IsEnabled" Value="False"/>
                </DataTrigger>
            </Style.Triggers>
        </Style>

        <Style x:Key="CaseStyle" TargetType="Button">
            <Setter Property="Background" Value="Transparent"/>
            <Setter Property="BorderThickness" Value="0"/>
            <Setter Property="BorderBrush" Value="Gray"/>
            <Setter Property="FontSize" Value="40"/>
            <Setter Property="Foreground" Value="Gray"/>
            <Setter Property="Template">
                <Setter.Value>
                    <!-- Je redéfinis le rendu du bouton pour pouvoir jouer facilement avec les arrière-fonds -->
                    <ControlTemplate TargetType="Button">
                        <Border x:Name="border" BorderBrush="{TemplateBinding BorderBrush}"
                                Background="{TemplateBinding Background}">
                            <ContentPresenter Content="{TemplateBinding Content}"
                                              VerticalAlignment="Center"
                                              HorizontalAlignment="Center" />
                        </Border>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
            <Style.Triggers>
                <!-- Ce multi-trigger permet d'appliquer des modifications visuelles 
                        uniquement quand les 2 conditions sont respectées (mouse over ET bouton actif) -->
                <MultiTrigger>
                    <MultiTrigger.Conditions>
                        <Condition Property="IsMouseOver" Value="True"/>
                        <Condition Property="IsEnabled" Value="True"/>
                    </MultiTrigger.Conditions>
                    <MultiTrigger.Setters>
                        <Setter Property="BorderThickness" Value="1"/>
                        <Setter Property="Background" Value="#44777777"/>
                    </MultiTrigger.Setters>
                </MultiTrigger>
            </Style.Triggers>
        </Style>
    </Window.Resources>
    <DockPanel Margin="25">
        <Grid DockPanel.Dock="Bottom" Height="50" >
            
            <Button Click="NouvellePartie_Click" 
                    IsEnabled="{Binding Jeu.PartieEnCours.EstTerminee}"
                    Padding="8,5"
                    HorizontalAlignment="Right"
                    VerticalAlignment="Center"
                    FontSize="15">
                Nouvelle partie
            </Button>

            <TextBlock Text="{Binding Jeu.PartieEnCours.MessagePartie}" 
                       VerticalAlignment="Center" 
                       HorizontalAlignment="Left"
                       FontFamily="SegoeUI Light"
                       FontSize="15" FontWeight="Bold" />
        </Grid>

        <!-- On utilise un ItemsControl pour pouvoir binder des objets qui ne sont pas des composants visuels WPF 
             On lui applique un style défini dans les ressources de la fenêtre -->
        <ItemsControl ItemsSource="{Binding Jeu.Plateau.Cases}" 
                      Style="{StaticResource GrilleStyle}">
            <!-- Par défaut, un ItemsControl n'a pas de layout particulier pour le rendu de ses enfants
                  Ici, j'utilise une grille pour pouvoir binder les lignes/colonnes avec les données de l'objet case -->
            <ItemsControl.ItemsPanel>
                <ItemsPanelTemplate>
                    <!-- ShowGridLines permet d'afficher les séparations entre les lignes et les colonnes -->
                    <Grid ShowGridLines="True">
                        <Grid.RowDefinitions>
                            <RowDefinition/>
                            <RowDefinition/>
                            <RowDefinition/>
                        </Grid.RowDefinitions>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition/>
                            <ColumnDefinition/>
                            <ColumnDefinition/>
                        </Grid.ColumnDefinitions>
                        <!-- les cases sont chargées par le data binding -->
                    </Grid>
                </ItemsPanelTemplate>
            </ItemsControl.ItemsPanel>
            <ItemsControl.ItemTemplate>
                <DataTemplate DataType="{x:Type classes:Case}">
                    <!-- On applique au bouton un style défini dans les ressources de la fenêtre -->
                    <Button x:Name="bouton" 
                            Content="{Binding JoueePar.Symbole}"
                            Style="{StaticResource CaseStyle}"
                            Click="Case_Click"/>
                    <DataTemplate.Triggers>
                        <!-- Quand l'état de la case vaut Gagnee, j'applique des modifications visuelles 
                             Etat étant une propriété, on utilise la syntaxe {x:Static [namespace]:[TypeEnum.Valeur]} -->
                        <DataTrigger Binding="{Binding Etat}" Value="{x:Static classes:EtatCase.Gagnee}">
                            <Setter TargetName="bouton" Property="Background" Value="#6600FF00"></Setter>
                        </DataTrigger>
                        <DataTrigger Binding="{Binding EstJouee}" Value="True">
                            <Setter TargetName="bouton" Property="IsEnabled" Value="False"></Setter>
                        </DataTrigger>
                    </DataTemplate.Triggers>
                </DataTemplate>
            </ItemsControl.ItemTemplate>
            <ItemsControl.ItemContainerStyle>
                <Style>
                    <Setter Property="Grid.Row" Value="{Binding Ligne}"/>
                    <Setter Property="Grid.Column" Value="{Binding Colonne}"/>
                </Style>
            </ItemsControl.ItemContainerStyle>
        </ItemsControl>
    </DockPanel>
</Window>
