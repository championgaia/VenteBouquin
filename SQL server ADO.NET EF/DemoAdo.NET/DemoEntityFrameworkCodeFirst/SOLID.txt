
SOLID

	Quelques regles de bonne conception de vos programmes en language Objet.

Single Responsability

	Chaque classe et chaque méthode ne doit avoir qu'un responsabilite.
	Chauque classe, methode ne doit qu'une seule chose

Open CLose principle

	Quand on intervient sur du code existant c'est qu'il y a un risque de regression quand on modifie du code.

	Quand on veut ajouter ajouter une fonctionnialté, faire en sorte de modifier le mojns posiible le code existant

	PATTERN STRATEGY

	Chaque nouvelle fonctionnalité soit 
	dans un nouveau classe independant des autres.

	=> Heritage polymorphisme heritage


Principe de substitution de Liskov

Les classes meres doivent pouvoir se substituer aux classes filles

Le comportement d'une meme methode exposée dans la classe mere 
avec les memes arguements 
doit etre le meme qu'on apelle la mere ou la fille 

Inversion of Control



Public Class1
{



public void toto()
{
	class2 c2 = new Class2();
}


}

Dependency Injection

le mecanisme qui va permttre d'implementer l'inversion of control.

On va deleguer la responsabilite d'instancier des objects au module d'injection de dependances.

L'interet est que mes clases concretes dans ma couche 
superieure n'ont plus connaissance des details des couches inferieures






















